name: package-deploy

on:
  push:
    branches:
      - master
      - release/*
  pull_request:
    branches: 
      - master
      - release/*

jobs:
  build:
    runs-on: ubuntu-latest
    if: "!contains(format('{0} {1}', github.event.head_commit.message, github.event.pull_request.title), '[ci-skip]')"
    steps:
    - name: Setup .NET 7.0
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 7.0.x
    - name: Install and cache PowerShell modules
      uses: potatoqualitee/psmodulecache@v5.2
      with:
        modules-to-cache: powershell-yaml
    - name: Add custom certs
      run: |
        sudo echo ${{ secrets.ROOT_CA }} >> root.crt
        sudo echo ${{ secrets.WILD_CA }} >> wild.crt
        sudo cp $GITHUB_WORKSPACE/root.crt $GITHUB_WORKSPACE/wild.crt /usr/local/share/ca-certificates/
        sudo update-ca-certificates
    - name: Check out Code 
      uses: actions/checkout@v2
    - name: Restore dependencies
      run: cd src && dotnet restore
    - name: Build solution and generate base NuGet package
      run: |  
        cd src/DataExplorer
        dotnet pack -c Release -o out 
    - name: Push generated base package to NuGet registry
      run: dotnet nuget push ./src/DataExplorer/out/*.nupkg --skip-duplicate -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
    - name: Build solution and generate Ef NuGet package
      run: | 
        cd src/DataExplorer.EfCore
        dotnet pack -c Release -o out 
    - name: Push generated Ef package to NuGet registry
      run: dotnet nuget push ./src/DataExplorer.EfCore/out/*.nupkg --skip-duplicate -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
    - name: Build solution and generate Mongo NuGet package
      run: | 
        cd src/DataExplorer.MongoDb
        dotnet pack -c Release -o out 
    - name: Push generated Mongo package to NuGet registry
      run: dotnet nuget push ./src/DataExplorer.MongoDb/out/*.nupkg --skip-duplicate -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
    - name: Build Docs
      run: dotnet tool restore && cd ./docs && dotnet docfx metadata
    - name: Build Docs
      shell: pwsh
      run: cd ./docs && ./fix-nmsp.ps1 api\toc.yml
    - name: Build Docs
      run: cd ./docs && dotnet docfx build -f
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Install WireGuard
      run: sudo apt-get install wireguard resolvconf
    - name: Create WireGuard tunnel configuration
      run: |
        sed -i -e "s@{{CTX_WIREGUARD_PRIVATE_KEY}}@${{ secrets.VPN_PRIVATE_KEY }}@" $GITHUB_WORKSPACE/docs/tunnel.conf
        sed -i -e "s@{{CTX_WIREGUARD_PUBLIC_KEY}}@${{ secrets.VPN_ENDPOINT_PUBLIC_KEY }}@" $GITHUB_WORKSPACE/docs/tunnel.conf
        sed -i -e "s@{{CTX_WIREGUARD_PRESHARED_KEY}}@${{ secrets.VPN_PRESHARED_KEY }}@" $GITHUB_WORKSPACE/docs/tunnel.conf
        sed -i -e "s@{{CTX_WIREGUARD_ENDPOINT}}@${{ secrets.VPN_ENDPOINT }}@" $GITHUB_WORKSPACE/docs/tunnel.conf
        sed -i -e "s@{{CTX_WIREGUARD_PERSISTENT_KEEPALIVE}}@${{ secrets.VPN_KEEPALIVE }}@" $GITHUB_WORKSPACE/docs/tunnel.conf
        sed -i -e "s@{{CTX_WIREGUARD_DNS}}@${{ secrets.VPN_DNS }}@" $GITHUB_WORKSPACE/docs/tunnel.conf
        sed -i -e "s@{{CTX_WIREGUARD_MTU}}@${{ secrets.VPN_MTU }}@" $GITHUB_WORKSPACE/docs/tunnel.conf
        sed -i -e "s@{{CTX_WIREGUARD_ADDRESS}}@${{ secrets.VPN_IPS }}@" $GITHUB_WORKSPACE/docs/tunnel.conf
        sed -i -e "s@{{CTX_WIREGUARD_ALLOWED_IPS}}@${{ secrets.VPN_ALLOWED_IPS }}@" $GITHUB_WORKSPACE/docs/tunnel.conf

        sudo cp $GITHUB_WORKSPACE/docs/tunnel.conf /etc/wireguard/
    - name: Activate WireGuard Tunnel
      run: wg-quick up tunnel
    - name: Login to private registry
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and push to private registry
      uses: docker/build-push-action@v2
      with:
        context: ./docs
        push: true
        tags: ${{ secrets.DOCKER_REGISTRY }}/data-explorer:latest
    - name: Sleep for 10 seconds
      uses: jakejarvis/wait-action@master
      with:
        time: '10s'
    - name: Trigger watchtower
      uses: wei/curl@v1
      with:
        args: |
          -H \"Authorization: Bearer ${{ secrets.WATCHTOWER_HTTP_API_TOKEN}}\" ${{ secrets.HOST_WATCHTOWER_API}}
    - name: Deactivate WireGuard Tunnel
      run: wg-quick down tunnel